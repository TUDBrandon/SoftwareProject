<?php
/**
 * Transaction class
 * 
 * Represents a transaction in the TechTrade system
 * Generated by ShoppingCart and processed via Payment
 */
class Transaction {
    // Private properties - encapsulation
    private $id;
    private $userId;
    private $items = [];
    private $subtotal;
    private $tax;
    private $total;
    private $status;
    private $createdAt;
    private $updatedAt;
    private $paymentId;
    
    // Status constants
    const STATUS_PENDING = 'pending';
    const STATUS_PROCESSING = 'processing';
    const STATUS_COMPLETED = 'completed';
    const STATUS_FAILED = 'failed';
    
    /**
     * Constructor
     * 
     * @param array $data Transaction data
     */
    public function __construct(array $data = []) {
        $this->id = $data['id'] ?? $data['transaction_id'] ?? null;
        $this->userId = $data['user_id'] ?? $data['userId'] ?? null;
        $this->items = $data['items'] ?? [];
        $this->subtotal = $data['subtotal'] ?? 0;
        $this->tax = $data['tax'] ?? 0;
        $this->total = $data['total'] ?? 0;
        $this->status = $data['status'] ?? self::STATUS_PENDING;
        $this->createdAt = $data['created_at'] ?? $data['createdAt'] ?? date('Y-m-d H:i:s');
        $this->updatedAt = $data['updated_at'] ?? $data['updatedAt'] ?? date('Y-m-d H:i:s');
        $this->paymentId = $data['payment_id'] ?? $data['paymentId'] ?? null;
    }
    
    /**
     * Get transaction ID
     * 
     * @return int|null
     */
    public function getId() {
        return $this->id;
    }
    
    /**
     * Get user ID
     * 
     * @return int|null
     */
    public function getUserId() {
        return $this->userId;
    }
    
    /**
     * Get transaction items
     * 
     * @return array
     */
    public function getItems() {
        return $this->items;
    }
    
    /**
     * Get transaction subtotal
     * 
     * @return float
     */
    public function getSubtotal() {
        return $this->subtotal;
    }
    
    /**
     * Get transaction tax
     * 
     * @return float
     */
    public function getTax() {
        return $this->tax;
    }
    
    /**
     * Get transaction total
     * 
     * @return float
     */
    public function getTotal() {
        return $this->total;
    }
    
    /**
     * Get transaction status
     * 
     * @return string
     */
    public function getStatus() {
        return $this->status;
    }
    
    /**
     * Set transaction status
     * 
     * @param string $status
     * @return self
     */
    public function setStatus(string $status) {
        // Validate status
        if (!in_array($status, [
            self::STATUS_PENDING,
            self::STATUS_PROCESSING,
            self::STATUS_COMPLETED,
            self::STATUS_FAILED
        ])) {
            return $this;
        }
        
        $this->status = $status;
        $this->updatedAt = date('Y-m-d H:i:s');
        return $this;
    }
    
    /**
     * Get transaction created date
     * 
     * @return string
     */
    public function getCreatedAt() {
        return $this->createdAt;
    }
    
    /**
     * Get transaction updated date
     * 
     * @return string
     */
    public function getUpdatedAt() {
        return $this->updatedAt;
    }
    
    /**
     * Get payment ID
     * 
     * @return int|null
     */
    public function getPaymentId() {
        return $this->paymentId;
    }
    
    /**
     * Set payment ID
     * 
     * @param int $paymentId
     * @return self
     */
    public function setPaymentId(int $paymentId) {
        $this->paymentId = $paymentId;
        $this->updatedAt = date('Y-m-d H:i:s');
        return $this;
    }
    
    /**
     * Process payment for this transaction
     * 
     * @param array $paymentData
     * @return Payment|false
     */
    public function processPayment(array $paymentData) {
        // Create payment with transaction data
        $paymentData['transaction_id'] = $this->id;
        $paymentData['amount'] = $this->total;
        
        $payment = new Payment($paymentData);
        
        // Update transaction with payment info
        if ($payment->getId()) {
            $this->setPaymentId($payment->getId());
            $this->setStatus(self::STATUS_COMPLETED);
            return $payment;
        }
        
        // Payment failed
        $this->setStatus(self::STATUS_FAILED);
        return false;
    }
    
    /**
     * Convert to array
     * 
     * @return array
     */
    public function toArray() {
        return [
            'id' => $this->id,
            'user_id' => $this->userId,
            'items' => $this->items,
            'subtotal' => $this->subtotal,
            'tax' => $this->tax,
            'total' => $this->total,
            'status' => $this->status,
            'created_at' => $this->createdAt,
            'updated_at' => $this->updatedAt,
            'payment_id' => $this->paymentId
        ];
    }
}
